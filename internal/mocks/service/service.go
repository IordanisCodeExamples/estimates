// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/service.go

// Package servicemock is a generated GoMock package.
package servicemock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	go_client_cintworks "github.com/junkd0g/go-client-cintworks"
)

// MockCintAPI is a mock of CintAPI interface.
type MockCintAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCintAPIMockRecorder
}

// MockCintAPIMockRecorder is the mock recorder for MockCintAPI.
type MockCintAPIMockRecorder struct {
	mock *MockCintAPI
}

// NewMockCintAPI creates a new mock instance.
func NewMockCintAPI(ctrl *gomock.Controller) *MockCintAPI {
	mock := &MockCintAPI{ctrl: ctrl}
	mock.recorder = &MockCintAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCintAPI) EXPECT() *MockCintAPIMockRecorder {
	return m.recorder
}

// GetFeasibilityEstimates mocks base method.
func (m *MockCintAPI) GetFeasibilityEstimates(surveySettings go_client_cintworks.SurveySettingsRequest) (go_client_cintworks.SurveyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeasibilityEstimates", surveySettings)
	ret0, _ := ret[0].(go_client_cintworks.SurveyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeasibilityEstimates indicates an expected call of GetFeasibilityEstimates.
func (mr *MockCintAPIMockRecorder) GetFeasibilityEstimates(surveySettings interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeasibilityEstimates", reflect.TypeOf((*MockCintAPI)(nil).GetFeasibilityEstimates), surveySettings)
}
